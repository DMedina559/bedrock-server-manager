# bedrock_server_manager/web/routers/register.py
"""
FastAPI router for user registration.
"""
import logging
import secrets
import time
from fastapi import APIRouter, Request, Depends, Form, status, HTTPException
from fastapi.responses import HTMLResponse, RedirectResponse
from sqlalchemy.orm import Session

from ...db.database import get_db
from ...db.models import User, RegistrationToken
from ...web.templating import templates
from ...web.auth_utils import pwd_context, get_current_user
from ...web.schemas import User as UserSchema

logger = logging.getLogger(__name__)

router = APIRouter(
    prefix="/register",
    tags=["Registration"],
)


@router.post("/generate-token", include_in_schema=False)
async def generate_token(
    request: Request,
    role: str = Form(...),
    db: Session = Depends(get_db),
    current_user: UserSchema = Depends(get_current_user),
):
    """
    Generates a new registration token.
    """
    if current_user.role != "admin":
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Only admins can generate registration tokens.",
        )

    token = secrets.token_urlsafe(32)
    expires = int(time.time()) + 86400  # 24 hours
    registration_token = RegistrationToken(token=token, role=role, expires=expires)
    db.add(registration_token)
    db.commit()

    logger.info(
        f"Registration token for role '{role}' generated by '{current_user.username}'."
    )
    return RedirectResponse(url="/users/", status_code=status.HTTP_302_FOUND)


@router.get("/{token}", response_class=HTMLResponse, include_in_schema=False)
async def registration_page(
    request: Request, token: str, db: Session = Depends(get_db)
):
    """
    Serves the registration page if the token is valid.
    """
    registration_token = (
        db.query(RegistrationToken).filter(RegistrationToken.token == token).first()
    )
    if not registration_token or registration_token.expires < int(time.time()):
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Invalid or expired registration token.",
        )

    return templates.TemplateResponse(
        request, "register.html", {"request": request, "token": token}
    )


@router.post("/{token}", include_in_schema=False)
async def register_user(
    request: Request,
    token: str,
    username: str = Form(...),
    password: str = Form(...),
    db: Session = Depends(get_db),
):
    """
    Creates a new user from a registration token.
    """
    registration_token = (
        db.query(RegistrationToken).filter(RegistrationToken.token == token).first()
    )
    if not registration_token or registration_token.expires < int(time.time()):
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Invalid or expired registration token.",
        )

    hashed_password = pwd_context.hash(password)
    user = User(
        username=username, hashed_password=hashed_password, role=registration_token.role
    )
    db.add(user)
    db.delete(registration_token)
    db.commit()

    logger.info(f"User '{username}' registered with role '{registration_token.role}'.")
    return RedirectResponse(url="/auth/login", status_code=status.HTTP_302_FOUND)
