# <PLUGIN_DIR>/class_docs_generator.py
import os
import inspect
from datetime import datetime
from typing import Callable, Any, List, Dict, Optional

from bedrock_server_manager import (
    PluginBase,
    BedrockServerManager,
    BedrockServer,
    Settings,
    BedrockDownloader,
    __version__,
)


class ClassDocsGenerator(PluginBase):
    """
    A utility plugin that automatically generates Markdown documentation for the
    application's core public classes.
    """

    version = "1.0.0"

    CLASSES_TO_DOCUMENT = [
        BedrockServerManager,
        BedrockServer,
        Settings,
        BedrockDownloader,
    ]

    def on_load(self):
        self.logger.info(
            "Core Docs Generator plugin loaded. Will generate docs on manager startup."
        )

    def on_manager_startup(self):
        """
        Triggered once when the application is fully started.
        """
        self.logger.info("Generating core class API documentation...")
        self.settings = Settings()

        try:
            markdown_content = self._format_as_markdown(self.CLASSES_TO_DOCUMENT)

            output_path = os.path.join(self.settings.config_dir, "CLASSES_REFERENCE.md")
            with open(output_path, "w", encoding="utf-8") as f:
                f.write(markdown_content)

            self.logger.info(
                f"Successfully generated Core Class documentation at: {output_path}"
            )

        except Exception as e:
            self.logger.error(
                f"Failed to generate Core Class documentation: {e}", exc_info=True
            )

    def _format_type_hint(self, annotation: Any) -> str:
        """
        Cleans up the string representation of a type hint for display.
        """
        if annotation == inspect.Parameter.empty:
            return "Any"

        # Get the string representation
        s = str(annotation)

        # Clean up common Python cruft like <class '...'> and typing.
        s = s.replace("typing.", "")
        s = s.replace("<class '", "").replace("'>", "")

        return s

    def _format_as_markdown(self, class_list: list) -> str:
        """
        Takes a list of classes and converts their structure into a formatted Markdown string.
        """
        lines = [
            f"# Bedrock Server Manager - Core Class Reference",
            f"> _This document was auto-generated by the `class_docs_generator` plugin on {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}._",
            f"> _Application Version: {__version__}_",
            "\n---",
            "This document provides a reference for the core public classes that can be imported and used in advanced plugins.",
        ]

        for cls in class_list:
            class_doc = inspect.getdoc(cls) or "No description provided."

            lines.append(f"\n## `class {cls.__name__}`")
            lines.append(f"_{class_doc.strip().splitlines()[0]}_")

            public_methods = []
            for name in dir(cls):
                # 1. Explicitly filter out dunder and private methods first.
                if name.startswith("_"):
                    continue

                try:
                    # 2. Get the attribute object itself.
                    attr = getattr(cls, name)

                    # 3. Ensure it's a callable function/method and not another class, etc.
                    if callable(attr) and not inspect.isclass(attr):
                        public_methods.append((name, attr))
                except AttributeError:
                    # This can happen with some complex class properties.
                    continue

            if not public_methods:
                continue

            lines.append("\n### Public Methods")

            for name, method in sorted(public_methods):
                # --- FIX FOR THE DOT PREFIX ---
                # The dot should be part of the formatting, not the name itself.

                try:
                    sig = inspect.signature(method)
                    doc = inspect.getdoc(method)
                    summary = (
                        doc.strip().splitlines()[0] if doc else "*No description.*"
                    )

                    param_parts = []
                    for param in sig.parameters.values():
                        if param.name == "self":
                            continue

                        p_name = param.name
                        p_type = self._format_type_hint(param.annotation)
                        p_default = param.default

                        if p_default == inspect.Parameter.empty:
                            param_parts.append(f"{p_name}: {p_type}")
                        else:
                            default_str = f" = {repr(p_default)}"
                            param_parts.append(f"{p_name}: {p_type}{default_str}")

                    # Construct the signature string correctly.
                    signature_str = f"{name}({', '.join(param_parts)})"

                    # Add the dot in the final output, not before.
                    lines.append(f"\n#### `.{signature_str}`")
                    lines.append(f"{summary}\n")

                except (ValueError, TypeError):
                    lines.append(f"\n#### `.{name}(...)`")
                    lines.append("*Could not inspect method signature.*\n")

        return "\n".join(lines)
